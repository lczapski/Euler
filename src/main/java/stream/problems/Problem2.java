package stream.problems;

import rx.Observable;

import java.util.Arrays;
import java.util.stream.Stream;

/**
 * https://projecteuler.net/problem=2
 */

public class Problem2 {
    /**
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:
     *
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     *
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     */

    public void doIt() {

        System.out.println("> " + Arrays.asList(1, 2, 3, 5, 8, 13, 21, 34, 55, 89).stream()
                .filter(i -> (i % 2 == 0)).mapToInt(Integer::intValue).sum());

        fibonacciWithMax(100)
                .filter(i -> (i % 2 == 0))
                .reduce((x, y) -> x + y)
                .forEach(i -> System.out.println(i));
        fibonacciWithMax(4000000)
                .filter(i -> (i % 2 == 0))
                .reduce((x, y) -> x + y)
                .subscribe(i -> System.out.println(i));

    }

    private Observable<Integer> fibonacciWithMax(int limit) {
        Stream<Integer[]> intStream = Stream.iterate(new Integer[]{1, 1}, p -> new Integer[]{p[1], p[0] + p[1]});
        return Observable.from(() -> intStream.iterator())
                .takeWhile(n -> n[1] < limit)
                .map(n -> n[1]);
    }
}
